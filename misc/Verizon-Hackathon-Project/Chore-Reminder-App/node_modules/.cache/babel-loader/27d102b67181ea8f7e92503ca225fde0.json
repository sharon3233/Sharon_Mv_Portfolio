{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kindlsh\\\\Documents\\\\Projects\\\\code-linguists-chore-bot\\\\chore-bot\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport data from './data';\nimport List from './List';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport dingSfx from './sounds/servicebell.mp3';\nimport popSfx from './sounds/pop.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [chores, setChore] = useState(data);\n  const sfx = new Audio(dingSfx);\n  const sfxPop = new Audio(popSfx);\n\n  const clearAndNotify = () => {\n    toast(\"All cleared!\");\n    sfxPop.play();\n    setChore([]);\n  }; //timer function to check chore for popup reminder.\n\n\n  async function checkChoreLoop() {\n    //get Date and time\n    const today = new Date();\n    const time = today.getHours() + \":\" + today.getMinutes() + \":\" + \"00\";\n    const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n    console.log(time + \":\" + date); //loop through chore due dates and check for a date time match`\n\n    for (const chore in data) {\n      //format time and check for match and toast if there is match\n      if (time + \":\" + date === data[chore].due) {\n        //Sound Effect load and play when match found\n        sfx.play();\n        toast(data[chore].name);\n      }\n    }\n  } //set timer interval 60000 = 1min  \n\n\n  const MINUTE_MS = 10000;\n  useEffect(() => {\n    const interval = setInterval(() => {\n      //Call function ever timer interval\n      checkChoreLoop();\n    }, MINUTE_MS);\n    return () => clearInterval(interval);\n  }, []); // function handleChore(e){\n  //     const newChore = chores;\n  //     newChore.name = e.target.value;\n  //     setChore(newChore);\n  //     console.log(\"New chore added\", chores);\n  // }\n  // function handleDay(e){\n  //     const newChore = chores;\n  //     newChore.day = e.target.value;\n  //     setChore(newChore);\n  //     console.log(\"Date added\", chores)\n  // }\n  // function handleStatus(e){\n  //     const newChore = chores;\n  //     newChore.status = e.target.value;\n  //     setChore(newChore);\n  //     console.log(\"Status added\", chores)\n  // }\n  // function handleImage(e){\n  //     const newChore = chores;\n  //     newChore.image = e.target.value;\n  //     setChore(newChore);\n  //     console.log(\"Chore image added\", chores)\n  // }\n  // function handleSubmit(e){\n  //     props.addChore(chores);\n  //     e.target.reset();\n  // }\n  //Function to download chores as json file\n\n  function download(content, fileName, contentType) {\n    toast(\"Downloading List\");\n    sfxPop.play();\n    const a = document.createElement(\"a\");\n    const file = new Blob([content], {\n      type: contentType\n    });\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          tabIndex: \"0\",\n          children: [chores.length, \" Chores Due This Week\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          chores: chores\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          tabIndex: \"0\",\n          className: \"add-chore\",\n          onClick: () => console.log(\"Clicked\"),\n          children: \"Add Chore\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          tabIndex: \"0\",\n          className: \"download-chore\",\n          onClick: () => download(JSON.stringify(data), 'chore.json', 'text/plain'),\n          children: \"Download Chore list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          tabIndex: \"0\",\n          className: \"clear-all\",\n          onClick: () => clearAndNotify(),\n          children: \"Clear all\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          tabIndex: \"0\",\n          id: \"dust\",\n          src: \"Images/dust.gif\",\n          alt: \"pink rabbit dusting gif\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"iHvhqw4Yn1TBkPJ3tnuzYmQWGj8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/kindlsh/Documents/Projects/code-linguists-chore-bot/chore-bot/src/App.js"],"names":["React","useState","useEffect","data","List","ToastContainer","toast","dingSfx","popSfx","App","chores","setChore","sfx","Audio","sfxPop","clearAndNotify","play","checkChoreLoop","today","Date","time","getHours","getMinutes","date","getFullYear","getMonth","getDate","console","log","chore","due","name","MINUTE_MS","interval","setInterval","clearInterval","download","content","fileName","contentType","a","document","createElement","file","Blob","type","href","URL","createObjectURL","click","length","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport data from './data';\r\nimport List from './List';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport dingSfx from './sounds/servicebell.mp3';\r\nimport popSfx from './sounds/pop.mp3';\r\n\r\nfunction App()   {\r\n    const [chores, setChore] = useState(data);\r\n    const sfx = new Audio(dingSfx);\r\n    const sfxPop = new Audio(popSfx);\r\n\r\n    \r\n    const clearAndNotify = () => {\r\n        toast(\"All cleared!\");\r\n        sfxPop.play();\r\n        setChore([]);\r\n    }\r\n    //timer function to check chore for popup reminder.\r\n    async function checkChoreLoop() {\r\n        //get Date and time\r\n        const today = new Date();\r\n        const time = today.getHours() + \":\" + today.getMinutes() + \":\" + \"00\";\r\n        const date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n        console.log((time+\":\"+date));\r\n        //loop through chore due dates and check for a date time match`\r\n        for(const chore in data){\r\n            //format time and check for match and toast if there is match\r\n            if((time+\":\"+date) === data[chore].due){\r\n                //Sound Effect load and play when match found\r\n                sfx.play();\r\n                toast(data[chore].name);\r\n            }\r\n        }\r\n    }\r\n    //set timer interval 60000 = 1min  \r\n    const MINUTE_MS = 10000;\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n          //Call function ever timer interval\r\n            checkChoreLoop();\r\n        }, MINUTE_MS);\r\n        return () => clearInterval(interval); \r\n    }, []);\r\n\r\n        // function handleChore(e){\r\n        //     const newChore = chores;\r\n        //     newChore.name = e.target.value;\r\n        //     setChore(newChore);\r\n        //     console.log(\"New chore added\", chores);\r\n        // }\r\n    \r\n        // function handleDay(e){\r\n        //     const newChore = chores;\r\n        //     newChore.day = e.target.value;\r\n        //     setChore(newChore);\r\n        //     console.log(\"Date added\", chores)\r\n        // }\r\n    \r\n        // function handleStatus(e){\r\n        //     const newChore = chores;\r\n        //     newChore.status = e.target.value;\r\n        //     setChore(newChore);\r\n        //     console.log(\"Status added\", chores)\r\n    \r\n        // }\r\n    \r\n        // function handleImage(e){\r\n        //     const newChore = chores;\r\n        //     newChore.image = e.target.value;\r\n        //     setChore(newChore);\r\n        //     console.log(\"Chore image added\", chores)\r\n        // }\r\n    \r\n        // function handleSubmit(e){\r\n        //     props.addChore(chores);\r\n        //     e.target.reset();\r\n\r\n        // }\r\n\r\n      //Function to download chores as json file\r\n    function download(content, fileName, contentType) {\r\n        toast(\"Downloading List\");\r\n        sfxPop.play();\r\n        const a = document.createElement(\"a\");\r\n        const file = new Blob([content], {type: contentType});\r\n        a.href = URL.createObjectURL(file);\r\n        a.download = fileName;\r\n        a.click();\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <main>\r\n                <section className=\"container\">\r\n                    <h3 tabIndex=\"0\">{chores.length} Chores Due This Week</h3>\r\n                    <List chores={chores} />\r\n                    <button tabIndex=\"0\" className=\"add-chore\" onClick={() => console.log(\"Clicked\")}>Add Chore</button>\r\n                    <button tabIndex=\"0\" className=\"download-chore\" onClick={() => download(JSON.stringify(data), 'chore.json', 'text/plain')}>Download Chore list</button>\r\n                    <button tabIndex=\"0\" className=\"clear-all\" onClick={() => clearAndNotify() }>Clear all</button>\r\n                    <img tabIndex=\"0\" id=\"dust\" src=\"Images/dust.gif\" alt=\"pink rabbit dusting gif\"/>\r\n                </section>\r\n                {/* <form onSubmit={handleSubmit}>\r\n                <input id=\"chore-name\" class=\"input-chore\" placeholder=\"chore\" type=\"text\" onchange={handleChore} required/>\r\n                <br/>\r\n                <input id=\"chore-day\" class=\"input-day\" placeholder=\"day\" type=\"date\"/>\r\n                </form> */}\r\n            </main>\r\n            <div>\r\n                <ToastContainer />\r\n            </div>\r\n\r\n    </>\r\n    );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}